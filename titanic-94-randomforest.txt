{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.7.10","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        \nimport warnings\n\nwarnings.filterwarnings('ignore')\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2021-10-22T17:03:01.961683Z","iopub.execute_input":"2021-10-22T17:03:01.962067Z","iopub.status.idle":"2021-10-22T17:03:02.354537Z","shell.execute_reply.started":"2021-10-22T17:03:01.962008Z","shell.execute_reply":"2021-10-22T17:03:02.353455Z"},"trusted":true},"execution_count":1,"outputs":[]},{"cell_type":"markdown","source":"# Load dataset","metadata":{}},{"cell_type":"code","source":"gender = pd.read_csv('/kaggle/input/titanic/gender_submission.csv')\ntrain = pd.read_csv('/kaggle/input/titanic/train.csv')\ntest = pd.read_csv('/kaggle/input/titanic/test.csv')","metadata":{"execution":{"iopub.status.busy":"2021-10-22T17:03:02.360943Z","iopub.execute_input":"2021-10-22T17:03:02.361313Z","iopub.status.idle":"2021-10-22T17:03:02.384016Z","shell.execute_reply.started":"2021-10-22T17:03:02.361267Z","shell.execute_reply":"2021-10-22T17:03:02.383142Z"},"trusted":true},"execution_count":2,"outputs":[]},{"cell_type":"code","source":"train.head()","metadata":{"execution":{"iopub.status.busy":"2021-10-22T17:03:02.385844Z","iopub.execute_input":"2021-10-22T17:03:02.386578Z","iopub.status.idle":"2021-10-22T17:03:02.410250Z","shell.execute_reply.started":"2021-10-22T17:03:02.386525Z","shell.execute_reply":"2021-10-22T17:03:02.409135Z"},"trusted":true},"execution_count":3,"outputs":[]},{"cell_type":"markdown","source":"# Cleaning data","metadata":{}},{"cell_type":"code","source":"def CLEAN(train):\n    print(train.groupby(train['Age'].isnull()).median())\n\n    print(train.groupby('Pclass')['Age'].describe())\n\n    for i,j in enumerate(train['Age'].isnull()):\n        if train.loc[i,['Pclass']].values ==1:\n            train.loc[i,['Age']] =train.loc[i,['Age']].fillna(38.233441)\n        elif train.loc[i,['Pclass']].values ==2:\n            train.loc[i,['Age']] =train.loc[i,['Age']].fillna(29.877630)\n        else:\n            train.loc[i,['Age']] =train.loc[i,['Age']].fillna(25.140620)\n\n\n    train.groupby(train['Cabin'].isnull()).mean()\n    train['Cabin'] = np.where(train['Cabin'].isnull(),0,1)\n\n    train['title']= train['Name'].apply(lambda x:x.split(',')[1].split('.')[0].strip() )\n    li = ['Dr','Master','Miss','Mr','Mrs']\n\n    train['title'] = train['title'].apply(lambda x : x if x in li else 'Other')\n\n    train = train.drop(['Name','Ticket','PassengerId'],axis=1)\n\n    print(train.head())\n\n    from sklearn.preprocessing import LabelEncoder\n    li = ['Sex','Embarked','title']\n\n    train = train.dropna()\n\n    for i in li:\n      train[i] = LabelEncoder().fit_transform(train[i])\n\n    train['family'] = train['SibSp']+train['Parch']\n    train = train.drop(['SibSp','Parch'],axis=1)\n    \n    return train\n\n","metadata":{"execution":{"iopub.status.busy":"2021-10-22T17:03:02.413667Z","iopub.execute_input":"2021-10-22T17:03:02.414032Z","iopub.status.idle":"2021-10-22T17:03:02.429911Z","shell.execute_reply.started":"2021-10-22T17:03:02.413981Z","shell.execute_reply":"2021-10-22T17:03:02.428298Z"},"trusted":true},"execution_count":4,"outputs":[]},{"cell_type":"code","source":"train = CLEAN(train)","metadata":{"execution":{"iopub.status.busy":"2021-10-22T17:03:02.433955Z","iopub.execute_input":"2021-10-22T17:03:02.434372Z","iopub.status.idle":"2021-10-22T17:03:05.249338Z","shell.execute_reply.started":"2021-10-22T17:03:02.434325Z","shell.execute_reply":"2021-10-22T17:03:05.248191Z"},"trusted":true},"execution_count":5,"outputs":[]},{"cell_type":"code","source":"from sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier","metadata":{"execution":{"iopub.status.busy":"2021-10-22T17:03:05.251413Z","iopub.execute_input":"2021-10-22T17:03:05.251773Z","iopub.status.idle":"2021-10-22T17:03:05.452954Z","shell.execute_reply.started":"2021-10-22T17:03:05.251728Z","shell.execute_reply":"2021-10-22T17:03:05.451982Z"},"trusted":true},"execution_count":6,"outputs":[]},{"cell_type":"code","source":"support = SVC(kernel='linear',random_state= 42)\nrandom = RandomForestClassifier(random_state=42)","metadata":{"execution":{"iopub.status.busy":"2021-10-22T17:03:05.454747Z","iopub.execute_input":"2021-10-22T17:03:05.455095Z","iopub.status.idle":"2021-10-22T17:03:05.460807Z","shell.execute_reply.started":"2021-10-22T17:03:05.455049Z","shell.execute_reply":"2021-10-22T17:03:05.459764Z"},"trusted":true},"execution_count":7,"outputs":[]},{"cell_type":"code","source":"model = [support,random]","metadata":{"execution":{"iopub.status.busy":"2021-10-22T17:03:05.462370Z","iopub.execute_input":"2021-10-22T17:03:05.462682Z","iopub.status.idle":"2021-10-22T17:03:05.474906Z","shell.execute_reply.started":"2021-10-22T17:03:05.462640Z","shell.execute_reply":"2021-10-22T17:03:05.474121Z"},"trusted":true},"execution_count":8,"outputs":[]},{"cell_type":"code","source":"test = pd.merge(test,gender,on='PassengerId')","metadata":{"execution":{"iopub.status.busy":"2021-10-22T17:03:05.476283Z","iopub.execute_input":"2021-10-22T17:03:05.476531Z","iopub.status.idle":"2021-10-22T17:03:05.493280Z","shell.execute_reply.started":"2021-10-22T17:03:05.476501Z","shell.execute_reply":"2021-10-22T17:03:05.492434Z"},"trusted":true},"execution_count":9,"outputs":[]},{"cell_type":"code","source":"feature = train.drop('Survived',axis=1)\nlabel = train['Survived']\n\n\n","metadata":{"execution":{"iopub.status.busy":"2021-10-22T17:03:05.494840Z","iopub.execute_input":"2021-10-22T17:03:05.495298Z","iopub.status.idle":"2021-10-22T17:03:05.501775Z","shell.execute_reply.started":"2021-10-22T17:03:05.495261Z","shell.execute_reply":"2021-10-22T17:03:05.500908Z"},"trusted":true},"execution_count":10,"outputs":[]},{"cell_type":"code","source":"test = CLEAN(test)","metadata":{"execution":{"iopub.status.busy":"2021-10-22T17:03:05.502903Z","iopub.execute_input":"2021-10-22T17:03:05.503869Z","iopub.status.idle":"2021-10-22T17:03:06.804097Z","shell.execute_reply.started":"2021-10-22T17:03:05.503817Z","shell.execute_reply":"2021-10-22T17:03:06.803323Z"},"trusted":true},"execution_count":11,"outputs":[]},{"cell_type":"code","source":"testf = test.drop('Survived',axis=1)\ntestl = test['Survived']\n\n\n","metadata":{"execution":{"iopub.status.busy":"2021-10-22T17:03:06.805171Z","iopub.execute_input":"2021-10-22T17:03:06.805795Z","iopub.status.idle":"2021-10-22T17:03:06.811687Z","shell.execute_reply.started":"2021-10-22T17:03:06.805758Z","shell.execute_reply":"2021-10-22T17:03:06.810789Z"},"trusted":true},"execution_count":12,"outputs":[]},{"cell_type":"code","source":"def fitAndScore(feature,label,testf,testl):\n    for i in model:\n        i.fit(feature,label)\n\n    acc = []\n    for i in model:\n        acc.append(i.score(testf,testl))\n    print(acc)","metadata":{"execution":{"iopub.status.busy":"2021-10-22T17:03:06.815093Z","iopub.execute_input":"2021-10-22T17:03:06.815381Z","iopub.status.idle":"2021-10-22T17:03:06.824827Z","shell.execute_reply.started":"2021-10-22T17:03:06.815346Z","shell.execute_reply":"2021-10-22T17:03:06.823808Z"},"trusted":true},"execution_count":13,"outputs":[]},{"cell_type":"code","source":"from imblearn.combine import SMOTEENN\nos = SMOTEENN(random_state=42)\nfeature,label = os.fit_resample(feature,label)","metadata":{"execution":{"iopub.status.busy":"2021-10-22T17:03:06.826414Z","iopub.execute_input":"2021-10-22T17:03:06.826677Z","iopub.status.idle":"2021-10-22T17:03:06.891982Z","shell.execute_reply.started":"2021-10-22T17:03:06.826647Z","shell.execute_reply":"2021-10-22T17:03:06.891279Z"},"trusted":true},"execution_count":14,"outputs":[]},{"cell_type":"code","source":"fitAndScore(feature,label,testf,testl)","metadata":{"execution":{"iopub.status.busy":"2021-10-22T17:03:06.893165Z","iopub.execute_input":"2021-10-22T17:03:06.893569Z","iopub.status.idle":"2021-10-22T17:03:07.163625Z","shell.execute_reply.started":"2021-10-22T17:03:06.893537Z","shell.execute_reply":"2021-10-22T17:03:07.162558Z"},"trusted":true},"execution_count":15,"outputs":[]},{"cell_type":"markdown","source":"# Delete outliers","metadata":{}},{"cell_type":"code","source":"def remove(data):\n  Q1 = np.percentile(data, 25, interpolation = 'midpoint')\n  \n# Third quartile (Q3)\n  Q3 = np.percentile(data, 75, interpolation = 'midpoint')\n  iqr = Q3 - Q1\n  percentile25 = data.quantile(0.25)\n  percentile75 = data.quantile(0.75)\n\n  upper_limit = percentile75 + 1.5 * iqr\n  lower_limit = percentile25 - 1.5 * iqr\n  data = np.where(\n    data > upper_limit,upper_limit,\n    np.where(\n        data < lower_limit,\n        lower_limit,\n        data\n    )\n  )\n  return data\n\n#train[train['discount_percent'] > upper_limit]\n#train[train['discount_percent'] < lower_limit]\n\n","metadata":{"execution":{"iopub.status.busy":"2021-10-22T17:03:07.165071Z","iopub.execute_input":"2021-10-22T17:03:07.165433Z","iopub.status.idle":"2021-10-22T17:03:07.173235Z","shell.execute_reply.started":"2021-10-22T17:03:07.165386Z","shell.execute_reply":"2021-10-22T17:03:07.172228Z"},"trusted":true},"execution_count":16,"outputs":[]},{"cell_type":"code","source":"plt.figure(figsize=(15,10))\nfor i in enumerate(train.columns):\n  plt.subplot(3,5,i[0]+1)\n  sns.boxplot(train[i[1]])\n","metadata":{"execution":{"iopub.status.busy":"2021-10-22T17:03:07.174897Z","iopub.execute_input":"2021-10-22T17:03:07.175462Z","iopub.status.idle":"2021-10-22T17:03:08.098375Z","shell.execute_reply.started":"2021-10-22T17:03:07.175412Z","shell.execute_reply":"2021-10-22T17:03:08.097433Z"},"trusted":true},"execution_count":17,"outputs":[]},{"cell_type":"code","source":"for i in ['Age','Fare']:\n    train[i] = remove(train[i])\n    test[i] = remove(test[i])","metadata":{"execution":{"iopub.status.busy":"2021-10-22T17:03:08.100051Z","iopub.execute_input":"2021-10-22T17:03:08.100401Z","iopub.status.idle":"2021-10-22T17:03:08.119609Z","shell.execute_reply.started":"2021-10-22T17:03:08.100357Z","shell.execute_reply":"2021-10-22T17:03:08.118784Z"},"trusted":true},"execution_count":18,"outputs":[]},{"cell_type":"code","source":"feature = train.drop('Survived',axis=1)\nlabel = train['Survived']\n\ntestf = test.drop('Survived',axis=1)\ntestl = test['Survived']\n\nfrom imblearn.combine import SMOTEENN\nos = SMOTEENN(random_state=42)\nfeature,label = os.fit_resample(feature,label)","metadata":{"execution":{"iopub.status.busy":"2021-10-22T17:03:08.121172Z","iopub.execute_input":"2021-10-22T17:03:08.121747Z","iopub.status.idle":"2021-10-22T17:03:08.146961Z","shell.execute_reply.started":"2021-10-22T17:03:08.121689Z","shell.execute_reply":"2021-10-22T17:03:08.146271Z"},"trusted":true},"execution_count":19,"outputs":[]},{"cell_type":"code","source":"fitAndScore(feature,label,testf,testl)","metadata":{"execution":{"iopub.status.busy":"2021-10-22T17:03:08.148436Z","iopub.execute_input":"2021-10-22T17:03:08.148964Z","iopub.status.idle":"2021-10-22T17:03:08.414649Z","shell.execute_reply.started":"2021-10-22T17:03:08.148918Z","shell.execute_reply":"2021-10-22T17:03:08.413561Z"},"trusted":true},"execution_count":20,"outputs":[]},{"cell_type":"markdown","source":"# Transform","metadata":{}},{"cell_type":"code","source":"plt.figure(figsize=(15,10))\nfor i in enumerate(train.columns):\n  plt.subplot(3,4,i[0]+1)\n  sns.distplot(train[i[1]])","metadata":{"execution":{"iopub.status.busy":"2021-10-22T17:03:08.416497Z","iopub.execute_input":"2021-10-22T17:03:08.416858Z","iopub.status.idle":"2021-10-22T17:03:10.470322Z","shell.execute_reply.started":"2021-10-22T17:03:08.416810Z","shell.execute_reply":"2021-10-22T17:03:10.469384Z"},"trusted":true},"execution_count":21,"outputs":[]},{"cell_type":"code","source":"plt.figure(figsize=(15,10))\nfor i in enumerate(test.columns):\n  plt.subplot(3,4,i[0]+1)\n  sns.distplot(test[i[1]])","metadata":{"execution":{"iopub.status.busy":"2021-10-22T17:03:10.471451Z","iopub.execute_input":"2021-10-22T17:03:10.472370Z","iopub.status.idle":"2021-10-22T17:03:12.254893Z","shell.execute_reply.started":"2021-10-22T17:03:10.472324Z","shell.execute_reply":"2021-10-22T17:03:12.253808Z"},"trusted":true},"execution_count":22,"outputs":[]},{"cell_type":"code","source":"li = ['Age','Fare','family']\nfrom sklearn.preprocessing import  StandardScaler\n\nfor i in li:\n  train[i] = StandardScaler().fit_transform(train[[i]])\n  testf[i] = StandardScaler().fit_transform(testf[[i]])","metadata":{"execution":{"iopub.status.busy":"2021-10-22T17:03:12.256381Z","iopub.execute_input":"2021-10-22T17:03:12.256680Z","iopub.status.idle":"2021-10-22T17:03:12.286857Z","shell.execute_reply.started":"2021-10-22T17:03:12.256646Z","shell.execute_reply":"2021-10-22T17:03:12.286185Z"},"trusted":true},"execution_count":23,"outputs":[]},{"cell_type":"code","source":"feature = train.drop('Survived',axis=1)\nlabel = train['Survived']\n\nfrom imblearn.combine import SMOTEENN\nos = SMOTEENN(random_state=42)\nfeature,label = os.fit_resample(feature,label)","metadata":{"execution":{"iopub.status.busy":"2021-10-22T17:03:12.287822Z","iopub.execute_input":"2021-10-22T17:03:12.288547Z","iopub.status.idle":"2021-10-22T17:03:12.317943Z","shell.execute_reply.started":"2021-10-22T17:03:12.288514Z","shell.execute_reply":"2021-10-22T17:03:12.316891Z"},"trusted":true},"execution_count":24,"outputs":[]},{"cell_type":"code","source":"fitAndScore(feature,label,testf,testl)","metadata":{"execution":{"iopub.status.busy":"2021-10-22T17:03:12.319280Z","iopub.execute_input":"2021-10-22T17:03:12.319521Z","iopub.status.idle":"2021-10-22T17:03:12.555918Z","shell.execute_reply.started":"2021-10-22T17:03:12.319493Z","shell.execute_reply":"2021-10-22T17:03:12.554964Z"},"trusted":true},"execution_count":25,"outputs":[]},{"cell_type":"markdown","source":"# GridSearchCV","metadata":{}},{"cell_type":"code","source":"from sklearn.model_selection import GridSearchCV\n\nparams = {\n    'criterion':['gini','entropy'],\n    'n_estimators':[x**2 for x in range(3,10)],\n    'n_jobs':[-1,None],\n    'random_state':[1,42,None],\n    'max_depth': [3,5,None]\n}\n\ncv = GridSearchCV(random,params,cv=5)\ncv.fit(feature,label)\n#print(cv._best_params,cv._best_result)\n\nprint(cv.best_params_,cv.best_score_)\n\nbestmodel = cv.best_estimator_\nbestmodel.score(testf,testl)","metadata":{"execution":{"iopub.status.busy":"2021-10-22T17:03:12.557477Z","iopub.execute_input":"2021-10-22T17:03:12.557712Z","iopub.status.idle":"2021-10-22T17:06:20.210519Z","shell.execute_reply.started":"2021-10-22T17:03:12.557684Z","shell.execute_reply":"2021-10-22T17:06:20.209570Z"},"trusted":true},"execution_count":26,"outputs":[]},{"cell_type":"code","source":"","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}